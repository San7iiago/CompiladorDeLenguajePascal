/* The following code was generated by JFlex 1.6.0 */
package CompiladorPascal;

import java.util.ArrayList;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0 from the specification file
 * <tt>C:/Users/Santiago/Documents/NetBeansProjects/Pascal/src/pascal/pascal.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\0\1\4\1\4\1\50\1\50\1\4\22\0\1\10\6\0\1\7"
            + "\1\36\1\37\1\0\1\5\1\26\1\5\1\45\1\5\1\6\11\3"
            + "\1\27\1\17\1\47\1\41\1\46\2\0\32\2\4\0\1\2\1\0"
            + "\1\15\1\33\1\23\1\40\1\22\1\42\1\14\1\32\1\30\1\1"
            + "\1\43\1\34\1\16\1\31\1\13\1\11\1\1\1\12\1\21\1\24"
            + "\1\20\1\25\1\35\1\1\1\44\1\1\12\0\1\50\u1fa2\0\1\50"
            + "\1\50\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\1\0\1\1\1\2\1\3\1\4\1\1\2\2\1\5"
            + "\5\2\1\6\1\7\3\2\1\10\1\11\1\12\1\13"
            + "\1\14\1\15\1\0\1\16\12\2\1\17\1\2\1\20"
            + "\2\2\1\21\1\22\3\2\1\23\1\2\1\24\3\2"
            + "\1\25\5\2\1\26\1\27\1\30\1\2\1\31\10\2"
            + "\1\32\1\33\1\2\1\34\1\2\1\35\2\2\1\36"
            + "\1\37\1\40\1\41";

    private static int[] zzUnpackAction() {
        int[] result = new int[84];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\51\0\122\0\173\0\51\0\244\0\315\0\366"
            + "\0\51\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\51\0\u01ec"
            + "\0\u0215\0\u023e\0\u0267\0\51\0\51\0\51\0\51\0\u0290"
            + "\0\u02b9\0\244\0\51\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386"
            + "\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\51\0\u047c\0\122"
            + "\0\u04a5\0\u04ce\0\51\0\51\0\u04f7\0\u0520\0\u0549\0\122"
            + "\0\u0572\0\122\0\u059b\0\u05c4\0\u05ed\0\122\0\u0616\0\u063f"
            + "\0\u0668\0\u0691\0\u06ba\0\122\0\122\0\122\0\u06e3\0\122"
            + "\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b"
            + "\0\122\0\u0854\0\u087d\0\122\0\u08a6\0\122\0\u08cf\0\u08f8"
            + "\0\122\0\122\0\122\0\122";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[84];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\2\1\3\1\2\1\4\1\5\2\2\1\6\1\5"
            + "\1\7\1\10\4\3\1\11\1\12\1\3\1\13\1\14"
            + "\1\15\1\16\1\17\1\20\1\21\2\3\1\22\1\3"
            + "\1\23\1\24\1\25\1\3\1\26\3\3\1\27\1\30"
            + "\1\31\53\0\3\3\2\0\1\3\2\0\6\3\1\0"
            + "\6\3\2\0\6\3\2\0\1\3\1\0\3\3\7\0"
            + "\1\4\2\0\1\4\43\0\3\32\1\0\2\32\1\33"
            + "\7\32\1\0\16\32\2\0\1\32\1\0\3\32\5\0"
            + "\3\3\2\0\1\3\2\0\1\3\1\34\4\3\1\0"
            + "\6\3\2\0\6\3\2\0\1\3\1\0\3\3\5\0"
            + "\3\3\2\0\1\3\2\0\6\3\1\0\2\3\1\35"
            + "\3\3\2\0\6\3\2\0\1\3\1\0\3\3\5\0"
            + "\3\3\2\0\1\3\2\0\6\3\1\0\1\3\1\36"
            + "\4\3\2\0\6\3\2\0\1\3\1\0\3\3\5\0"
            + "\3\3\2\0\1\3\2\0\6\3\1\0\6\3\2\0"
            + "\1\3\1\37\2\3\1\40\1\3\2\0\1\3\1\0"
            + "\3\3\5\0\3\3\2\0\1\3\2\0\1\3\1\41"
            + "\4\3\1\0\6\3\2\0\2\3\1\42\1\3\1\43"
            + "\1\3\2\0\1\3\1\0\3\3\5\0\3\3\2\0"
            + "\1\3\2\0\6\3\1\0\6\3\2\0\2\3\1\44"
            + "\3\3\2\0\1\3\1\0\3\3\5\0\3\3\2\0"
            + "\1\3\2\0\4\3\1\45\1\3\1\0\6\3\2\0"
            + "\6\3\2\0\1\3\1\0\3\3\45\0\1\46\10\0"
            + "\3\3\2\0\1\3\2\0\6\3\1\0\6\3\2\0"
            + "\1\3\1\47\4\3\2\0\1\3\1\0\1\50\2\3"
            + "\5\0\3\3\2\0\1\3\2\0\6\3\1\0\2\3"
            + "\1\51\3\3\2\0\6\3\2\0\1\3\1\0\3\3"
            + "\5\0\3\3\2\0\1\3\2\0\1\3\1\52\4\3"
            + "\1\0\6\3\2\0\6\3\2\0\1\3\1\0\3\3"
            + "\45\0\1\53\50\0\1\54\10\0\3\3\2\0\1\3"
            + "\2\0\2\3\1\55\3\3\1\0\6\3\2\0\6\3"
            + "\2\0\1\3\1\0\3\3\5\0\3\3\2\0\1\3"
            + "\2\0\4\3\1\56\1\3\1\0\6\3\2\0\6\3"
            + "\2\0\1\3\1\0\3\3\5\0\3\3\2\0\1\3"
            + "\2\0\6\3\1\0\2\3\1\57\3\3\2\0\6\3"
            + "\2\0\1\3\1\0\3\3\5\0\3\3\2\0\1\3"
            + "\2\0\6\3\1\0\6\3\2\0\6\3\2\0\1\60"
            + "\1\0\3\3\5\0\3\3\2\0\1\3\2\0\6\3"
            + "\1\0\1\3\1\61\4\3\2\0\6\3\2\0\1\3"
            + "\1\0\3\3\5\0\3\3\2\0\1\3\2\0\6\3"
            + "\1\0\4\3\1\62\1\3\2\0\6\3\2\0\1\3"
            + "\1\0\3\3\5\0\3\3\2\0\1\3\2\0\4\3"
            + "\1\63\1\3\1\0\6\3\2\0\6\3\2\0\1\3"
            + "\1\0\3\3\5\0\3\3\2\0\1\3\2\0\1\3"
            + "\1\64\4\3\1\0\6\3\2\0\6\3\2\0\1\3"
            + "\1\0\3\3\5\0\3\3\2\0\1\3\2\0\6\3"
            + "\1\0\2\3\1\65\3\3\2\0\6\3\2\0\1\3"
            + "\1\0\3\3\5\0\3\3\2\0\1\3\2\0\1\3"
            + "\1\66\4\3\1\0\6\3\2\0\6\3\2\0\1\3"
            + "\1\0\3\3\5\0\3\3\2\0\1\3\2\0\6\3"
            + "\1\0\4\3\1\67\1\3\2\0\6\3\2\0\1\3"
            + "\1\0\3\3\5\0\3\3\2\0\1\3\2\0\3\3"
            + "\1\70\2\3\1\0\6\3\2\0\6\3\2\0\1\3"
            + "\1\0\3\3\5\0\3\3\2\0\1\3\2\0\6\3"
            + "\1\0\6\3\2\0\1\71\5\3\2\0\1\3\1\0"
            + "\3\3\5\0\3\3\2\0\1\3\2\0\3\3\1\72"
            + "\2\3\1\0\6\3\2\0\6\3\2\0\1\3\1\0"
            + "\3\3\5\0\3\3\2\0\1\3\2\0\6\3\1\0"
            + "\6\3\2\0\6\3\2\0\1\73\1\0\3\3\5\0"
            + "\3\3\2\0\1\3\2\0\6\3\1\0\1\3\1\74"
            + "\4\3\2\0\6\3\2\0\1\3\1\0\3\3\5\0"
            + "\3\3\2\0\1\3\2\0\6\3\1\0\2\3\1\75"
            + "\3\3\2\0\6\3\2\0\1\3\1\0\3\3\5\0"
            + "\3\3\2\0\1\3\2\0\1\3\1\76\4\3\1\0"
            + "\6\3\2\0\6\3\2\0\1\3\1\0\3\3\5\0"
            + "\3\3\2\0\1\3\2\0\6\3\1\0\1\3\1\77"
            + "\4\3\2\0\6\3\2\0\1\3\1\0\3\3\5\0"
            + "\3\3\2\0\1\3\2\0\6\3\1\0\6\3\2\0"
            + "\1\3\1\100\4\3\2\0\1\3\1\0\3\3\5\0"
            + "\3\3\2\0\1\3\2\0\6\3\1\0\2\3\1\101"
            + "\3\3\2\0\6\3\2\0\1\3\1\0\3\3\5\0"
            + "\3\3\2\0\1\3\2\0\6\3\1\0\6\3\2\0"
            + "\1\102\5\3\2\0\1\3\1\0\3\3\5\0\3\3"
            + "\2\0\1\3\2\0\6\3\1\0\4\3\1\103\1\3"
            + "\2\0\6\3\2\0\1\3\1\0\3\3\5\0\3\3"
            + "\2\0\1\3\2\0\1\3\1\104\4\3\1\0\6\3"
            + "\2\0\6\3\2\0\1\3\1\0\3\3\5\0\3\3"
            + "\2\0\1\3\2\0\6\3\1\0\6\3\2\0\4\3"
            + "\1\105\1\3\2\0\1\3\1\0\1\3\1\106\1\3"
            + "\5\0\3\3\2\0\1\3\2\0\6\3\1\0\3\3"
            + "\1\107\2\3\2\0\6\3\2\0\1\3\1\0\3\3"
            + "\5\0\3\3\2\0\1\3\2\0\3\3\1\110\2\3"
            + "\1\0\6\3\2\0\6\3\2\0\1\3\1\0\3\3"
            + "\5\0\3\3\2\0\1\3\2\0\6\3\1\0\6\3"
            + "\2\0\1\3\1\111\4\3\2\0\1\3\1\0\3\3"
            + "\5\0\3\3\2\0\1\3\2\0\6\3\1\0\2\3"
            + "\1\112\3\3\2\0\6\3\2\0\1\3\1\0\3\3"
            + "\5\0\3\3\2\0\1\3\2\0\4\3\1\113\1\3"
            + "\1\0\6\3\2\0\6\3\2\0\1\3\1\0\3\3"
            + "\5\0\3\3\2\0\1\3\2\0\6\3\1\0\6\3"
            + "\2\0\1\3\1\114\4\3\2\0\1\3\1\0\3\3"
            + "\5\0\3\3\2\0\1\3\2\0\6\3\1\0\2\3"
            + "\1\115\3\3\2\0\6\3\2\0\1\3\1\0\3\3"
            + "\5\0\3\3\2\0\1\3\2\0\1\3\1\116\4\3"
            + "\1\0\6\3\2\0\6\3\2\0\1\3\1\0\3\3"
            + "\5\0\3\3\2\0\1\3\2\0\6\3\1\0\2\3"
            + "\1\117\3\3\2\0\6\3\2\0\1\3\1\0\3\3"
            + "\5\0\3\3\2\0\1\3\2\0\6\3\1\0\6\3"
            + "\2\0\4\3\1\120\1\3\2\0\1\3\1\0\3\3"
            + "\5\0\3\3\2\0\1\3\2\0\5\3\1\121\1\0"
            + "\6\3\2\0\6\3\2\0\1\3\1\0\3\3\5\0"
            + "\3\3\2\0\1\3\2\0\6\3\1\0\6\3\2\0"
            + "\6\3\2\0\1\3\1\0\2\3\1\122\5\0\3\3"
            + "\2\0\1\3\2\0\1\3\1\123\4\3\1\0\6\3"
            + "\2\0\6\3\2\0\1\3\1\0\3\3\5\0\3\3"
            + "\2\0\1\3\2\0\6\3\1\0\6\3\2\0\1\3"
            + "\1\124\4\3\2\0\1\3\1\0\3\3\4\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[2337];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\1\0\1\11\2\1\1\11\3\1\1\11\5\1\1\11"
            + "\4\1\4\11\2\1\1\0\1\11\12\1\1\11\4\1"
            + "\2\11\50\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[84];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead. When a
     * lead/high surrogate has been read from the input stream into the final
     * zzBuffer position, this will have a value of 1; otherwise, it will have a
     * value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    public ArrayList<Token> ts = new ArrayList<Token>();
    public String errlex = "";

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    Lexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 156) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int totalRead = 0;
        while (totalRead < requested) {
            int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
            if (numRead == -1) {
                break;
            }
            totalRead += numRead;
        }

        if (totalRead > 0) {
            zzEndRead += totalRead;
            if (totalRead == requested) {
                /* possibly more input available */
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            return false;
        }

        // totalRead = 0: End of stream
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has
     * grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Contains user EOF-code, which will be executed exactly once, when the end
     * of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                    zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1: {
                    errlex += ("\nError: Invalid symbol. Line " + (yyline + 1) + " Column " + (yycolumn + 1));
                }
                case 34:
                    break;
                case 2: {
                    ts.add(new Token("Identificador: ", yytext()));
                    return symbol(sym.id);
                }
                case 35:
                    break;
                case 3: {
                    ts.add(new Token("Numero: ", yytext()));
                    return symbol(sym.num);
                }
                case 36:
                    break;
                case 4: {
                }
                case 37:
                    break;
                case 5: {
                    ts.add(new Token("Fin", yytext()));
                    return symbol(sym.fin);
                }
                case 38:
                    break;
                case 6: {
                    ts.add(new Token("Coma: ", yytext()));
                    return symbol(sym.coma);
                }
                case 39:
                    break;
                case 7: {
                    ts.add(new Token("Tipo: ", yytext()));
                    return symbol(sym.tipo);
                }
                case 40:
                    break;
                case 8: {
                    ts.add(new Token("Parentesis Iz: ", yytext()));
                    return symbol(sym.pi);
                }
                case 41:
                    break;
                case 9: {
                    ts.add(new Token("Parentesis De: ", yytext()));
                    return symbol(sym.pd);
                }
                case 42:
                    break;
                case 10: {
                    ts.add(new Token("Igual: ", yytext()));
                    return symbol(sym.igual);
                }
                case 43:
                    break;
                case 11: {
                    ts.add(new Token("Fin . : ", yytext()));
                    return symbol(sym.punto);
                }
                case 44:
                    break;
                case 12: {
                    ts.add(new Token("Mayor Que: ", yytext()));
                    return symbol(sym.mayorQ);
                }
                case 45:
                    break;
                case 13: {
                    ts.add(new Token("Menor Que : ", yytext()));
                    return symbol(sym.menorQ);
                }
                case 46:
                    break;
                case 14: {
                    ts.add(new Token("Texto: ", yytext()));
                    return symbol(sym.texto);
                }
                case 47:
                    break;
                case 15: {
                    ts.add(new Token("Igualdad: ", yytext()));
                    return symbol(sym.igualdad);
                }
                case 48:
                    break;
                case 16: {
                    ts.add(new Token("Si: ", yytext()));
                    return symbol(sym.ifF);
                }
                case 49:
                    break;
                case 17: {
                    ts.add(new Token("Mayor o Igual : ", yytext()));
                    return symbol(sym.mayorOI);
                }
                case 50:
                    break;
                case 18: {
                    ts.add(new Token("Menor o Igual", yytext()));
                    return symbol(sym.menorOI);
                }
                case 51:
                    break;
                case 19: {
                    ts.add(new Token("Fin: ", yytext()));
                    return symbol(sym.end);
                }
                case 52:
                    break;
                case 20: {
                    ts.add(new Token("Libreria", yytext()));
                    return symbol(sym.crt);
                }
                case 53:
                    break;
                case 21: {
                    ts.add(new Token("Variable: ", yytext()));
                    return symbol(sym.var);
                }
                case 54:
                    break;
                case 22: {
                    ts.add(new Token("Usar", yytext()));
                    return symbol(sym.uses);
                }
                case 55:
                    break;
                case 23: {
                    ts.add(new Token("Sino: ", yytext()));
                    return symbol(sym.elseF);
                }
                case 56:
                    break;
                case 24: {
                    ts.add(new Token("Char: ", yytext()));
                    return symbol(sym.chare);
                }
                case 57:
                    break;
                case 25: {
                    ts.add(new Token("Entonces: ", yytext()));
                    return symbol(sym.then);
                }
                case 58:
                    break;
                case 26: {
                    ts.add(new Token("Empiezo: ", yytext()));
                    return symbol(sym.begin);
                }
                case 59:
                    break;
                case 27: {
                    ts.add(new Token("Escribir: ", yytext()));
                    return symbol(sym.write);
                }
                case 60:
                    break;
                case 28: {
                    ts.add(new Token("Leer: ", yytext()));
                    return symbol(sym.readln);
                }
                case 61:
                    break;
                case 29: {
                    ts.add(new Token("Limpiar: ", yytext()));
                    return symbol(sym.clrscr);
                }
                case 62:
                    break;
                case 30: {
                    ts.add(new Token("Programa", yytext()));
                    return symbol(sym.program);
                }
                case 63:
                    break;
                case 31: {
                    ts.add(new Token("Leer tecla: ", yytext()));
                    return symbol(sym.readkey);
                }
                case 64:
                    break;
                case 32: {
                    ts.add(new Token("Integer: ", yytext()));
                    return symbol(sym.inte);
                }
                case 65:
                    break;
                case 33: {
                    ts.add(new Token("Escribir Sobre: ", yytext()));
                    return symbol(sym.writeln);
                }
                case 66:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        zzDoEOF();
                        {
                            return new java_cup.runtime.Symbol(sym.EOF);
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }

}
