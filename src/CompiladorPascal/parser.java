//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 24 22:15:57 EST 2019
//----------------------------------------------------
package CompiladorPascal;

import java_cup.runtime.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Sun Nov 24 22:15:57 EST 2019
 */
public class parser extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\042\000\002\002\020\000\002\002\004\000\002\003"
        + "\003\000\002\003\004\000\002\004\007\000\002\005\003"
        + "\000\002\005\005\000\002\006\003\000\002\007\003\000"
        + "\002\007\003\000\002\010\003\000\002\010\004\000\002"
        + "\011\003\000\002\011\003\000\002\011\003\000\002\011"
        + "\003\000\002\012\013\000\002\013\003\000\002\013\003"
        + "\000\002\014\007\000\002\014\003\000\002\015\007\000"
        + "\002\016\003\000\002\016\003\000\002\017\003\000\002"
        + "\017\003\000\002\020\006\000\002\021\007\000\002\022"
        + "\006\000\002\023\003\000\002\023\003\000\002\023\003"
        + "\000\002\023\003\000\002\023\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\120\000\004\004\005\001\002\000\004\002\122\001"
        + "\002\000\004\011\006\001\002\000\004\005\007\001\002"
        + "\000\004\006\010\001\002\000\004\007\011\001\002\000"
        + "\004\005\012\001\002\000\004\010\013\001\002\000\004"
        + "\011\112\001\002\000\006\010\uffff\017\uffff\001\002\000"
        + "\006\010\013\017\016\001\002\000\004\020\020\001\002"
        + "\000\006\010\ufffe\017\ufffe\001\002\000\004\005\021\001"
        + "\002\000\014\011\022\021\035\022\030\026\023\030\024"
        + "\001\002\000\004\027\107\001\002\000\004\023\103\001"
        + "\002\000\006\011\060\012\057\001\002\000\016\011\ufff2"
        + "\021\ufff2\022\ufff2\026\ufff2\030\ufff2\034\ufff2\001\002\000"
        + "\016\011\ufff3\021\ufff3\022\ufff3\026\ufff3\030\ufff3\034\ufff3"
        + "\001\002\000\004\023\050\001\002\000\004\023\uffea\001"
        + "\002\000\016\011\ufff4\021\ufff4\022\ufff4\026\ufff4\030\ufff4"
        + "\034\ufff4\001\002\000\016\011\ufff5\021\ufff5\022\ufff5\026"
        + "\ufff5\030\ufff5\034\ufff5\001\002\000\016\011\ufff7\021\ufff7"
        + "\022\ufff7\026\ufff7\030\ufff7\034\ufff7\001\002\000\014\011"
        + "\036\021\035\022\030\026\023\030\024\001\002\000\004"
        + "\023\uffeb\001\002\000\004\027\043\001\002\000\004\034"
        + "\041\001\002\000\016\011\ufff6\021\ufff6\022\ufff6\026\ufff6"
        + "\030\ufff6\034\ufff6\001\002\000\004\035\042\001\002\000"
        + "\004\002\001\001\002\000\006\011\045\033\044\001\002"
        + "\000\004\005\047\001\002\000\004\005\046\001\002\000"
        + "\016\011\uffe7\021\uffe7\022\uffe7\026\uffe7\030\uffe7\034\uffe7"
        + "\001\002\000\004\034\uffe5\001\002\000\006\011\053\025"
        + "\051\001\002\000\004\024\uffe8\001\002\000\004\024\054"
        + "\001\002\000\004\024\uffe9\001\002\000\004\005\055\001"
        + "\002\000\016\011\uffec\021\uffec\022\uffec\026\uffec\030\uffec"
        + "\034\uffec\001\002\000\014\036\061\037\063\040\064\041"
        + "\062\042\066\001\002\000\016\031\uffef\036\uffef\037\uffef"
        + "\040\uffef\041\uffef\042\uffef\001\002\000\016\031\ufff0\036"
        + "\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\001\002\000\006"
        + "\011\uffe4\012\uffe4\001\002\000\006\011\uffe1\012\uffe1\001"
        + "\002\000\006\011\uffe3\012\uffe3\001\002\000\006\011\uffe2"
        + "\012\uffe2\001\002\000\006\011\060\012\057\001\002\000"
        + "\006\011\uffe0\012\uffe0\001\002\000\004\031\070\001\002"
        + "\000\004\017\071\001\002\000\014\011\022\021\035\022"
        + "\030\026\023\030\024\001\002\000\016\011\022\021\035"
        + "\022\030\026\023\030\024\034\073\001\002\000\006\005"
        + "\076\032\075\001\002\000\016\011\ufff1\021\ufff1\022\ufff1"
        + "\026\ufff1\030\ufff1\034\ufff1\001\002\000\004\017\077\001"
        + "\002\000\016\011\uffed\021\uffed\022\uffed\026\uffed\030\uffed"
        + "\034\uffed\001\002\000\014\011\022\021\035\022\030\026"
        + "\023\030\024\001\002\000\016\011\022\021\035\022\030"
        + "\026\023\030\024\034\101\001\002\000\004\005\102\001"
        + "\002\000\016\011\uffee\021\uffee\022\uffee\026\uffee\030\uffee"
        + "\034\uffee\001\002\000\004\011\104\001\002\000\004\024"
        + "\105\001\002\000\004\005\106\001\002\000\016\011\uffe6"
        + "\021\uffe6\022\uffe6\026\uffe6\030\uffe6\034\uffe6\001\002\000"
        + "\004\011\045\001\002\000\006\013\ufffc\014\ufffc\001\002"
        + "\000\006\013\114\014\113\001\002\000\006\013\ufffa\014"
        + "\ufffa\001\002\000\006\015\116\016\120\001\002\000\004"
        + "\011\112\001\002\000\006\013\ufffb\014\ufffb\001\002\000"
        + "\004\005\ufff9\001\002\000\004\005\121\001\002\000\004"
        + "\005\ufff8\001\002\000\006\010\ufffd\017\ufffd\001\002\000"
        + "\004\002\000\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\120\000\004\002\003\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\006\003\014\004\013\001"
        + "\001\000\006\005\110\006\107\001\001\000\002\001\001"
        + "\000\004\004\016\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\020\010\033\011\032\012\031"
        + "\015\030\016\026\020\025\021\024\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\013\055\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\020\011\037\012\031\015\030\016\026\020\025\021"
        + "\024\022\036\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\017"
        + "\051\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\023"
        + "\064\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\013\066\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\020\010\071\011\032\012"
        + "\031\015\030\016\026\020\025\021\024\001\001\000\016"
        + "\011\037\012\031\015\030\016\026\020\025\021\024\001"
        + "\001\000\004\014\073\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\020\010\077\011\032\012"
        + "\031\015\030\016\026\020\025\021\024\001\001\000\016"
        + "\011\037\012\031\015\030\016\026\020\025\021\024\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\007\116\001\001\000\004\006\114\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    public String errsin = "";

    public void syntax_error(Symbol token) {
        errsin += ("\nError de sintaxis en pos " + (token.left + 1) + "," + (token.right + 1));
        throw new UnsupportedOperationException("\nError de sintaxis en pos " + (token.left + 1) + "," + (token.right + 1));

    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$parser$actions {

    private final parser parser;

    /**
     * Constructor
     */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack CUP$parser$stack,
            int CUP$parser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // R ::= menorOI 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("R", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // R ::= mayorOI 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("R", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // R ::= igual 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("R", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // R ::= menorQ 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("R", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // R ::= mayorQ 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("R", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // Q ::= id igualdad readkey fin 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("Q", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // P ::= readln pi id pd fin 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("P", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // O ::= id igualdad id fin 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("O", 14, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // N ::= texto 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("N", 13, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // N ::= id 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("N", 13, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // M ::= writeln 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("M", 12, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // M ::= write 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("M", 12, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // L ::= M pi N pd fin 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("L", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // K ::= fin 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("K", 10, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // K ::= elseF begin G end fin 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("K", 10, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // J ::= num 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("J", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // J ::= id 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("J", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // I ::= ifF J R J then begin G end K 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("I", 8, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // H ::= P 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("H", 7, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // H ::= O 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("H", 7, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // H ::= L 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("H", 7, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // H ::= I 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("H", 7, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // G ::= G H 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("G", 6, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // G ::= H 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("G", 6, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // F ::= chare 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("F", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // F ::= inte 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("F", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // E ::= id 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("E", 4, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // D ::= D coma E 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("D", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // D ::= E 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("D", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // C ::= var D tipo F fin 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("C", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // B ::= B C 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("B", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // B ::= C 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("B", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= A EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // A ::= program id fin uses crt fin B begin clrscr fin G Q end punto 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("A", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 13)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
            return CUP$parser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
